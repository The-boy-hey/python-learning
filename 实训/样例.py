# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'library.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
from PyQt5 import QtCore, QtGui, QtWidgets
import qdarkstyle
import pymysql
from PyQt5.QtWidgets import QMainWindow
import register
import detail

class Ui_MainWindow(QMainWindow):
    # __init__:当前类的构造方法
    def __init__(self):
        super(Ui_MainWindow, self).__init__()
        self.ut = 0
        self.setupUi(self)

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(887, 651)                 # 设置窗口的大小，宽887px,高651px
        icon = QtGui.QIcon()            #  创建一个图标对象
        # 给图标设置对应的图片
        icon.addPixmap(QtGui.QPixmap("images/MainWindow_1.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        # 将图标对象添加到主窗口上
        MainWindow.setWindowIcon(icon)

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label1 = QtWidgets.QLabel(self.centralwidget)
        self.label1.setGeometry(QtCore.QRect(290, 10, 331, 81))
        font = QtGui.QFont()                # 创建字体对象
        font.setPointSize(16)               # 设置字体大小为16
        font.setBold(True)                  #  设置字体加粗
        font.setWeight(75)
        self.label1.setFont(font)           # 将对应的字体样式添加到label1中
        self.label1.setObjectName("label1")     # 设置label1的名字
        # 创建文本框对象，表示用户名对应的输入框
        self.lineEdit1 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit1.setGeometry(QtCore.QRect(390, 160, 211, 41))     # 设置输入框对应的大小和位置
        self.lineEdit1.setObjectName("lineEdit1")                   #   设置输入框的名字
        # 创建label2文本标签对象
        self.label2 = QtWidgets.QLabel(self.centralwidget)
        self.label2.setGeometry(QtCore.QRect(270, 160, 91, 41))         # 文本标签的位置
        # 文本标签对应的字体样式
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.label2.setFont(font)               # 将对应的字体样式添加到label标签中
        self.label2.setObjectName("label2")     # 设置label标签的名字
        # 创建一个密码输入框
        self.lineEdit2 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit2.setGeometry(QtCore.QRect(390, 230, 211, 41))
        self.lineEdit2.setText("")          # 表示密码输入框的初始内容
        self.lineEdit2.setObjectName("lineEdit2")               # 设置密码输入框的名字
        # 创建一个表示密码的label文本提示标签
        self.label3 = QtWidgets.QLabel(self.centralwidget)
        self.label3.setGeometry(QtCore.QRect(270, 230, 91, 41))         # 设置文本标签的大小和位置
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.label3.setFont(font)
        self.label3.setObjectName("label3")
        #  创建一个单选按钮
        self.radioButton1 = QtWidgets.QRadioButton(self.centralwidget)
        # 定义单选按钮的大小和位置
        self.radioButton1.setGeometry(QtCore.QRect(330, 300, 121, 61))
        # 创建单选按钮需要现实的字体样式
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.radioButton1.setFont(font)         # 将字体样式添加到单选按钮中
        self.radioButton1.setObjectName("radioButton1")         # 设置单选按钮的名字
        self.radioButton1.setChecked(True)              # 设置单选按钮默认选择状态

        self.radioButton2 = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton2.setGeometry(QtCore.QRect(480, 300, 121, 61))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.radioButton2.setFont(font)
        self.radioButton2.setObjectName("radioButton2")
        self.radioButton2.setChecked(False)
        # 创建一个普通按钮
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        # 设置普通按钮的大小和位置
        self.pushButton.setGeometry(QtCore.QRect(400, 390, 111, 41))
        # 设置按钮的字体样式
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton.setFont(font)       # 将字体样式添加到按钮上
        self.pushButton.setObjectName("pushButton")         # 设置按钮的名字

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 887, 26))
        self.menubar.setObjectName("menubar")               #  设置菜单条的名字
        # 创建一个菜单
        self.menuview = QtWidgets.QMenu(self.menubar)
        self.menuview.setObjectName("menuview")             # 设置菜单项的名字
        MainWindow.setMenuBar(self.menubar)                 # 将菜单条添加到主窗口中
        # 创建菜单先的具体选项
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)         #将菜单条添加到主窗口
        # 创建具体的菜单项- 注册菜单项
        self.action1 = QtWidgets.QAction(MainWindow)
        self.action1.setObjectName("action1")           # 设置注册菜单项的名字
        # 创建菜单项 --- 登录
        self.action2 = QtWidgets.QAction(MainWindow)
        self.action2.setObjectName("action2")           # 设置登录菜单项的名字
        # 退出登录菜单项
        self.action3 = QtWidgets.QAction(MainWindow)
        self.action3.setObjectName("action3")
        # 创建退出系统菜单项
        self.action4 = QtWidgets.QAction(MainWindow)
        self.action4.setObjectName("action4")
        # 将菜单项添加到菜单按钮中
        self.menuview.addAction(self.action1)
        self.menuview.addAction(self.action2)
        self.menuview.addAction(self.action3)
        self.menuview.addAction(self.action4)
        # 将菜单向添加到菜单条中
        self.menubar.addAction(self.menuview.menuAction())

        #事件绑定
        self.pushButton.clicked.connect(self.login)
        self.radioButton1.toggled.connect(self.usertype)
        self.radioButton2.toggled.connect(self.usertype)
        self.action1.triggered.connect(self.regist_user)
        self.action2.triggered.connect(self.flush)
        self.action3.triggered.connect(self.flush)
        self.action4.triggered.connect(self.quit_sys)


        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "图书管理系统"))
        self.label1.setText(_translate("MainWindow", "欢迎使用图书管理系统"))
        self.label2.setText(_translate("MainWindow", "用户名"))
        self.label3.setText(_translate("MainWindow", "密 码"))
        self.radioButton1.setText(_translate("MainWindow", "管理员"))
        self.radioButton2.setText(_translate("MainWindow", "普通用户"))
        self.pushButton.setText(_translate("MainWindow", "登  录"))
        self.menuview.setTitle(_translate("MainWindow", "菜单栏"))
        self.action1.setText(_translate("MainWindow", "注册"))
        self.action2.setText(_translate("MainWindow", "登录"))
        self.action3.setText(_translate("MainWindow", "退出登录"))
        self.action4.setText(_translate("MainWindow", "退出系统"))

    def login(self):
        user = self.lineEdit1.text()            # 获取文本输入框中的内容
        pwd = self.lineEdit2.text()             # 获取密码输入框中内容

        print(user,pwd)
        self.usertype()             # 获取选择的管理员还是普通用户
        print(self.ut)
        if (user == "" or pwd == ""):           # 判断用户名或密码是否为空
            # 弹出对应的对话框，
            """
            QMessageBox.warning ：弹出对应的警告框
            QMessageBox.Yes, ：警告对话框中的按钮，如果两个值一样则只显示一个确定按钮，
            QMessageBox.No  :警告对话框中的取消按钮
            """
            print(QMessageBox.warning(self, "警告", "用户名和密码不可为空!", QMessageBox.Yes, QMessageBox.Yes))
            return
        try:
            self.db = pymysql.connect(host='localhost',port=3306,user="root",password='root',database='total',charset='utf8')
        except:
            QMessageBox.warning(self, '警告', "连接数据库故障", QMessageBox.Yes)
            self.db.rollback()
        if self.ut == 1:#管理员用户
            sql = 'select * from manager where user_name="%s"and user_pwd=%s'  # sql指令语句
            cur = self.db.cursor()  # 获取游标
            cur.execute(sql,(user,pwd))  # 执行sql语句
            results = cur.fetchall()  # 通过fetchall获取数据
            print('results:',results)
            self.hide()         # 如果登录成功当前登录窗口隐藏
            #转入主界面
            self.libs = detail_mg.Ui_MainWindow()
            self.libs.show()

        else:#普通用户
            sql = 'select * from consumer where user_name="%s"' % user  # sql指令语句
            cur = self.db.cursor()  # 获取游标
            cur.execute(sql)  # 执行sql语句
            results = cur.fetchall()  # 通过fetchall获取数据
            print('results:', results)
            self.hide()
            # 转入主界面
            self.libs = detail_stu.Ui_MainWindow()
            self.libs.show()


    def usertype(self):
        info = 0
        if self.radioButton1.isChecked():           # 如果单选按钮1- 管理员被选择
            self.radioButton1.setChecked(True)          # 设置被选择
            info = 1
        else:
            self.radioButton1.setChecked(False)
            info = 0
        if self.radioButton2.isChecked():           # 如果选择的是普通用户
            self.radioButton2.setChecked(True)
            info = 0
        else:
            self.radioButton2.setChecked(False)
            info = 1
        self.ut = info

    def regist_user(self):
        self.hide()  # 主界面的隐藏
        self.regist = register.Ui_MainWindow()
        #注册界面打开
        self.regist.show()

    def flush(self):
        self.lineEdit1.clear()
        self.lineEdit2.clear()
        if self.ut == 0:
            self.radioButton1.setChecked(True)

    def quit_sys(self):
        self.close()
        sys.exit()

if __name__ == '__main__':
    from PyQt5.Qt import *
    app = QtWidgets.QApplication(sys.argv) # 创建一个应用程序
    app.setStyleSheet(qdarkstyle.load_stylesheet_pyqt5())
    ui1 = Ui_MainWindow()    # 创建设计好的窗口对象
    ui1.show()
    sys.exit(app.exec_())